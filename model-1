#!/usr/bin/env bash

# ======================================================================================================================================================== #
# curl -L m.linuxuniverse.com.br | bash
# ======================================================================================================================================================== #

# Informations for the compliance Celeron:
#        enp1s0 = ETH0
#        enp2s0 = ETH1
# eno1 (enp3s0) = ETH2
# MACVLAN       = ETH3

export serverip="172.20.0.22"
export usern4me="admin"; export passw0rd="isorulez"

export lanhost="http://$serverip"; export wanhost="http://z.net-freaks.com:3434"

export NEEDRESTART_MODE=a; export DEBIAN_FRONTEND=noninteractive
export pathsrv="/srv/containers/scripts/config/install"; export destpath="/var/lib/libvirt/images"
export github="https://raw.githubusercontent.com/urbancompasspony/docker/main/"

export package_list="$list00 \
net-tools speedtest-cli whois w3m w3m-img netdiscover figlet iperf arp-scan traceroute sshpass fail2ban network-manager \
libatasmart-bin smartmontools zip unzip p7zip-full 7zip p7zip cifs-utils rsnapshot rclone iotop pluma \
haveged beep stress lm-sensors cmatrix btop inxi tree hwloc figlet dialog \
gpm tmux xinit xorg openbox pavucontrol caja epiphany-browser gparted gnome-disk-utility terminator rdesktop unrar \
qemu-system qemu-utils qemu-user qemu-kvm qemu-guest-agent libvirt-clients libvirt-daemon-system bridge-utils virt-manager ovmf dnsmasq"

# VM & Docker Only
export list00="qemu-system qemu-utils qemu-user qemu-kvm qemu-guest-agent \
libvirt-clients libvirt-daemon-system bridge-utils virt-manager ovmf dnsmasq \
docker.io docker-buildx \
genisoimage"

# Essentials [ALL]
export list01="openvpn beep inxi curl iperf iperf nmap parallel smartmontools tmux zip unzip dialog traceroute arp-scan net-tools netdiscover rdesktop scrcpy speedtest-cli whois btop \
rsnapshot rclone openssh-server net-tools haveged cifs-utils w3m w3m-img iotop htop lm-sensors samba samba-dsdb-modules samba-vfs-modules sshpass speedtest-cli traceroute \
docker.io build-essential libatasmart-bin btrfs-progs fail2ban gpm xinit xorg openbox pavucontrol caja epiphany-browser gparted gnome-disk-utility terminator cmatrix unrar"

# ARM64
export package_2204="linux-modules-extra-raspi"
export package_2404="docker-buildx"

# ======================================================================================================================================================== #

function root_check0 {
  [ "$EUID" -ne 0 ] || {
    clear
    echo "Não execute este script como Root! DICA: Remova o SUDO do comando ou execute-o como usuario local."; echo ""
    exit
  }
}

function basic_struct0 {
  [ -f /usr/bin/dialog ] && {
    echo . >/dev/null
  } || {
    sudo apt update
    sudo apt install dialog wget -y
    bashconf0
    exit
  }
}

function hardsys0 {
  export sysmain="DISTRIB_RELEASE=22.04"
  sysversion=$(cat /etc/lsb-release | awk -F: '/RELEASE/ {print $0}' | awk '{print $1}')

  export hardmain="Celeron(R) J4125"
  hardversion=$(cat /proc/cpuinfo | grep 'model name' | head -n 1 | awk -F: '{ print $2 }' | cut -d ' ' -f 3,4)

  # Se hardware e sistema estão ok, é o Appliance!
  [ "$sysversion" = "$sysmain" ] && [ "$hardversion" = "$hardmain" ] && {
    appliance0
  } || {
    # Se não é o Appliance, mas o Ubuntu é o adequado, verificar hardware...
    [ "$sysversion" = "$sysmain" ] && {
      # ...que pode ser aarch64...
      [ $(arch) = "aarch64" ] && {
        aarcharm0
      } || {
        # ...ou generico.
        linite0
      }
    } || {
      # Se o Ubuntu não é adequado e o hardware é genérico, prosseguir com cautela.
      clear; echo ""
      echo "SISTEMA OU HARDWARE INADEQUADO(S) DETECTADO!"; echo ""
      echo "O automatismo deste script exige o sistema 'Ubuntu Server 22.04 LTS' e voce esta usando o $sysversion"; echo ""
      echo "Da mesma forma este script exige o hardware 'Appliance 4x Gigabit Celeron J4125' e voce esta usando o $hardversion"; echo ""
      echo "Prosseguindo com os scripts basicos e o Modelo Linite de instalação Manual..."; echo ""; sleep 2
      basicsys0
      menuB
    }
  }
}

function welcome0 {
  clear; echo ""; echo "Preparo de Servidor $1 by SuitIT®"; echo ""

  [ -f "$pathsrv"/finished ] || [ -f /home/$USER/.installed ] && {
    clear; echo ""; echo "Este servidor ja foi configurado previamente. Entrando no menu Linite manual..."; sleep 3
    menuB
  } || {
    echo "Insira a senha padrao a seguir: ubuntu"; echo ""
    sudo echo . >/dev/null
  }

  echo ""; echo "5"; sleep 1; echo "4"; sleep 1; echo "3"; sleep 1; echo "2"; sleep 1; echo "1"; sleep 1
}

function bashconf0 {
  clear; echo "Preparando sistema e configurando BASH"; echo ""
  sudo mkdir -p "$destpath"; sudo chmod 777 -R "$destpath"; sudo mkdir -p "$pathsrv"
  curl -sSL https://raw.githubusercontent.com/urbancompasspony/bashrc/main/install.sh | bash
  . .bashrc
}

function mkswap0 {
  [ -f /swapfile ] && {
    echo "." >/dev/zero
  } || {
    sudo dd if=/dev/zero of=/swapfile bs=1k count=1000000
    sudo chmod 0600 /swapfile
    sudo mkswap /swapfile; sudo swapon /swapfile
    echo "/swapfile none swap sw 0 0" | sudo tee -a /etc/fstab
  }
}

function passmgr0 {
  [ -f "$pathsrv"/information ] && {
    clear; echo "Informacoes coletadas de uma instalacao anterior. Continuando."; echo ""; sleep 2
    var1=$(sed -n '1p' "$pathsrv"/information)
    var2=$(sed -n '2p' "$pathsrv"/information)
    var3=$(sed -n '3p' "$pathsrv"/information)
    password0
  } || {
    menu0
    sudo touch "$pathsrv"/information
    echo "$var1" | sudo tee "$pathsrv"/information
    echo "$var2" | sudo tee -a "$pathsrv"/information
    echo "$var3" | sudo tee -a "$pathsrv"/information
    password0
  }
}

function timezone0 {
  [ -f "$pathsrv"/timezone_ok ] && {
    clear; echo "TimeZone ja foi configurado. Continuando."; echo ""; sleep 2
  } || {
    sudo timedatectl set-timezone Etc/GMT+3
    sudo touch "$pathsrv"/timezone_ok
  }
}

function useless0 {
  [ -f "$pathsrv"/useless_services ] && {
    clear; echo "Os pacotes inuteis ja foram removidos e desativados. Continuando."; echo ""; sleep 2
  } || {
    clear; echo "Removendo pacotes e desativando servicos inuteis"; echo ""
    sudo apt purge needrestart cloud-init snapd unattended-upgrades plank deja-dup evolution evolution-data-server bluez blueman bluetooth -y
    sudo systemctl disable NetworkManager-wait-online.service
    sudo systemctl mask NetworkManager-wait-online.service
    sudo systemctl disable systemd-networkd-wait-online.service
    sudo systemctl mask systemd-networkd-wait-online.service
    sudo touch "$pathsrv"/useless_services
  }
}

function update0 {
  [ -f "$pathsrv"/update_ok ] && {
    clear; echo "O sistema ja foi atualizado e os pacotes necessarios instalados. Continuando."; echo ""; sleep 2
  } || {
    clear; echo "Atualizando o sistema"; echo ""
    sudo apt update; sudo apt upgrade -y; sudo apt autoremove -y; clear

    echo "Instalando pacotes...."
    sudo apt install $package_list --no-install-recommends -y &&
    sync &&

    sudo usermod -aG libvirt administrador
    sudo usermod -aG libvirt-qemu administrador
    sudo usermod -aG docker administrador
    sudo touch "$pathsrv"/update_ok
  }
}

function update1 {
  [ -f "$pathsrv"/updatearm_ok ] && {
    clear; echo "O sistema ja foi atualizado e os pacotes necessarios instalados. Continuando."; echo ""; sleep 2
  } || {
    clear; echo "Atualizando o sistema"; echo ""
    sudo apt update; sudo apt upgrade -y; sudo apt autoremove -y; clear

    echo "Instalando pacotes...."
    sudo apt install $list01 $package_2204 --no-install-recommends -y &&
    sync &&

    sudo usermod -aG docker administrador
    sudo touch "$pathsrv"/updatearm_ok
  }
}

function update2 {
  [ -f "$pathsrv"/update_ok ] && {
    clear; echo "O sistema ja foi atualizado e os pacotes necessarios instalados. Continuando."; echo ""; sleep 2
  } || {
    clear; echo "Atualizando o sistema"; echo ""
    sudo apt update; sudo apt upgrade -y; sudo apt autoremove -y; clear

    echo "Instalando pacotes...."
    sudo apt install $list01 --no-install-recommends -y &&
    sync &&

    sudo usermod -aG docker administrador
    sudo touch "$pathsrv"/update_ok
  }
}

function password0 {
  [ -f "$pathsrv"/password_ok ] && {
    clear; echo "Senha substituida anteriormente. Continuando."; echo ""; sleep 2
  } || {
    clear; echo "Trocando a senha do usuario ADMINISTRADOR deste servidor!"
    echo "administrador:$var3" | sudo chpasswd && sudo touch "$pathsrv"/password_ok
  }
}

function netplan0 {
  [ -f "$pathsrv"/netplan_ok ] && {
    clear; echo "O Netplan ja foi ajustado. Continuando."; echo ""; sleep 2
  } || {
    sleep 3; clear; echo "Ajustando Netplan"
    echo -e "
# This is the network config written by 'linite model-1' script
network:
  ethernets:
#    renderer: NetworkManager
    eno1:
      dhcp4: true
      nameservers:
        addresses: [1.1.1.1, 8.8.8.8]
    enp1s0:
      dhcp4: true
      nameservers:
        addresses: [1.1.1.1, 8.8.8.8]
    enp2s0:
      dhcp4: true
      nameservers:
        addresses: [1.1.1.1, 8.8.8.8]
    enp4s0:
      dhcp4: false
      addresses: [172.25.0.3/24]
      gateway4: 172.25.0.1
      nameservers:
        addresses: [1.1.1.1, 8.8.8.8]
  version: 2" | sudo tee /etc/netplan/00-installer-config.yaml
    sudo netplan apply && sudo touch "$pathsrv"/netplan_ok
  }
}

function netplan1 {
  [ -f "$pathsrv"/netplan_ok ] && {
    clear; echo "O Netplan ja foi ajustado. Continuando."; echo ""; sleep 2
  } || {
    echo -e "
#
#network:
#    ethernets:
#        renderer: NetworkManager
#        enp4s0:
#            addresses: [192.168.250.10/24]
#            gateway4: 192.168.250.1
#            dhcp4: no
##           optional: true
#            nameservers:
#              addresses: [192.168.250.1]
#              #addresses: [200.225.197.34, 200.225.197.37] 
#              #addresses: [200.175.89.139, 200.175.5.139]
#              #addresses: [8.8.4.4, 8.8.8.8]
#              #addresses: [1.1.1.1, 1.0.0.1]
#    version: 2" | sudo tee -a /etc/netplan/00-installer-config.yaml

echo -e "
#
#network:
#  ethernets:
#    eth0:
#      dhcp4: true
#      optional: true

#    eth1: # THIS!
#      dhcp4: no
#      optional: true
#      addresses: [172.16.1.2/24]
#  version: 2" | sudo tee -a /etc/netplan/00-installer-config.yaml

    sudo touch "$pathsrv"/netplan_ok
  }
}

function macvlan0 {
  [ -f "$pathsrv"/macvlan_ok ] && {
    clear; echo "A MAVLAN ja foi configurada. Continuando."; echo ""; sleep 2
  } || {
    sleep 3; clear; echo "Definindo MACVLAN para os containers"
    sudo docker network create -d macvlan --subnet="172.25.0.0"/24 --gateway="172.25.0.1" -o parent="enp4s0" macvlan && sudo touch "$pathsrv"/macvlan_ok
  }
}

function pfsense0 {
  [ -f "$pathsrv"/pfsense_ok ] && {
    clear; echo "O pfSense ja foi configurado. Continuando."; echo ""; sleep 2
  } || {
    sleep 3; clear; echo "Adicionando pfSense como VM"
    
    if ping -c 1 $serverip >/dev/null; then
      webadress="$lanhost"
    else
      webadress="$wanhost"
    fi

    [ -f "$destpath"/"$1" ] && {
      sudo chmod 777 /var/run/libvirt/libvirt-sock
    } || {
      clear; sudo wget --user $usern4me --password $passw0rd $webadress/"$1" -O $destpath/"$1" &&
      sudo chmod 777 /var/run/libvirt/libvirt-sock
    }

    sudo virt-install --import \
--name pfSense \
--boot hd,cdrom,menu=on \
--memory 2048 \
--vcpus 2 \
--cpu host \
--network type=direct,source=enp1s0,source_mode=bridge,mac=52:54:00:55:ea:01 \
--network type=direct,source=enp2s0,source_mode=bridge,mac=52:54:00:55:ea:02 \
--network type=direct,source=eno1,source_mode=bridge,mac=52:54:00:55:ea:03 \
--disk /var/lib/libvirt/images/"$1" \
--os-variant=freebsd13.1 \
--graphics vnc \
--import \
--autostart 1>/dev/null 2>/dev/null &
    sleep 3; clear
    sudo touch "$pathsrv"/pfsense_ok
  }
}

function sysctl0 {
  [ -f "$pathsrv"/sysctl_ok ] && {
    clear; echo "O SYSCTL ja foi modificado. Continuando."; echo ""; sleep 2
  } || {
    sleep 3; clear; echo "Aplicando recursos extras ao SYSCTL"
    echo -e "kernel.sysrq=1
vm.panic_on_oom=1
vm.swappiness=10
kernel.panic=5
#net.ipv4.ip_forward=1
#net.ipv6.conf.all.disable_ipv6=1
#net.ipv6.conf.default.disable_ipv6=1" | sudo tee -a /etc/sysctl.conf &&
    sudo touch "$pathsrv"/sysctl_ok
  }
}

function motd0 {
  [ -f "$pathsrv"/motd_ok ] && {
    clear; echo "O MOTD ja foi substituido. Continuando."; echo ""; sleep 2
  } || {
    sleep 3; clear; echo "Ajustando tela de boas vindas do servidor"
    sudo rm -R /etc/update-motd.d/*
    curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/MOTD/00-header | sudo tee /etc/update-motd.d/00-header
    curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/MOTD/20-sysinfo | sudo tee /etc/update-motd.d/20-sysinfo
    curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/MOTD/90-dynamic-motd | sudo tee /etc/update-motd.d/90-dynamic-motd
    sudo chmod +x /etc/update-motd.d/*
    sudo touch "$pathsrv"/motd_ok
  }
}

function journal0 {
  [ -f "$pathsrv"/journal_ok ] && {
    clear; echo "O JournalCTL ja foi ajustado. Continuando."; echo ""; sleep 2
  } || {
    sleep 3; clear; echo "Ajustando JOURNAL"
    echo -e "
Storage=persistent
SystemMaxUse=5G
SystemKeepFree=10G" | sudo tee -a /etc/systemd/journald.conf &&
    sudo touch "$pathsrv"/journal_ok
  }
}

function fstab0 {
  [ -f "$pathsrv"/fstab_ok ] && {
    clear; echo "O fstab ja foi ajustado de acordo. Continuando."; echo ""; sleep 2
  } || {
    sudo mkdir /mnt/main
    sudo mkdir /mnt/backup

    sleep 3; clear; echo "Adicionando entradas extras ao fstab"

    echo -e "
# Temp to ram!
tmpfs /tmp tmpfs defaults 0 0
tmpfs /var/tmp tmpfs defaults 0 0

# Main Disk
# /dev/disk/by-uuid/ /mnt/main ext4 defaults 0 0

# Backup
# /dev/disk/by-uuid/ /mnt/backup ext4 defaults 0 0

# Acesso Externo
# //172.25.0.X/folder /mnt/folder cifs credentials=/home/administrador/.smb,iocharset=utf8,file_mode=0777,dir_mode=0777,noperm,user,vers=2.1,nofail,x-systemd.automount,x-systemd.requires=network-online.target,x-systemd.device-timeout=3 0 0" | sudo tee -a /etc/fstab &&

    sudo touch "$pathsrv"/fstab_ok
  }
}

function beep0 {
  [ -f "$pathsrv"/beep ] && {
    clear; echo "O beep ja foi adicionado. Continuando."; echo ""; sleep 2
  } || {
    sleep 3; clear; echo "Criando um Beep bonitinho se tiver speaker no servidor!"
    wget https://raw.githubusercontent.com/urbancompasspony/linux.cheat.sheet/main/beep/beep.sh -O /home/administrador/.beep.sh
    clear; echo "Beep instalado. Testando..."; sudo bash /home/administrador/.beep.sh
    sleep 2; echo "@reboot sleep 60; bash /home/administrador/.beep.sh" | sudo tee /tmp/crontab_new
    sudo crontab -l | cat - /tmp/crontab_new | tee crontab.txt && sudo crontab crontab.txt
    sudo rm crontab.txt; sudo touch "$pathsrv"/beep
  }
}

function the_end0 {
  sudo touch "$pathsrv"/finished
  clear; echo "Instalação concluida!"
  echo "Reiniciando sistema..."; sleep 3
  sudo reboot
}

function smbconf0 {
  clear; echo "Adicionando modelo SAMBA AD"
  sudo mkdir -p /srv/containers/scripts/
  curl -sSL https://raw.githubusercontent.com/urbancompasspony/docker/main/SAMBA_Model/smbAD.conf | sudo tee /srv/containers/scripts/SMB-AD-Model.conf
}

function menu0 {
  VALUE1="passw0rd"; VALUE2="P4sswrd"; VALUE3="Psswd0"

  VALUE0=$(dialog --cancel-label "Sair da Instalacao" --ok-label "Iniciar Instalacao" --title "Novo Servidor" --form "Defina as SENHAS a seguir, nao deixe em branco:" 11 50 0 \
"Senha  PiHole:" 1 1 "$VALUE1" 1 15 40 0 \
"Senha do XPRA:" 2 1 "$VALUE2" 2 15 40 0 \
"Administrador:" 3 1 "$VALUE3" 3 15 40 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)

  [ $? -ne 0 ] && canceled_by_user
  var1=$(echo "$VALUE0" | sed -n 1p)
  var2=$(echo "$VALUE0" | sed -n 2p)
  var3=$(echo "$VALUE0" | sed -n 3p)
  check0
}

function check0 {
  [ "$var1" = "" ] || [ "$var2" = "" ] || [ "$var3" = "" ] && {
    clear; echo ""; echo "Nao deixe nenhum campo em branco!"; sleep 2;
    menu0
  } || {
    echo . >/dev/null
  }
}

function canceled_by_user {
  clear; echo ""; echo "A INSTALACAO FOI CANCELADA PELO USUARIO."; echo ""
  exit
}

function docker0 {
  [ -f "$pathsrv"/dockers_ok ] && {
    clear; echo "Os containers ja foram configurados. Continuando."; echo ""; sleep 2
  } || {
    sleep 3; clear; echo "Instalando e inicializando containers!"

    pihole0
    myspeed0
    xpra0
    scriptsrv0
    openspeed0

    # Devem haver 5 containers listados!
    dkn=$(docker ps -aq | wc -l)
    [ "$dkn" == "5" ] && {
      sudo touch "$pathsrv"/dockers_ok
    } || {
      echo . >/dev/null
    }
  }
}

function pihole0 {
  sudo mkdir -p /srv/containers/pihole/{etc,log,dnsmasq.d}
  sudo touch /srv/containers/pihole/Information

  echo "172.25.0.2" | sudo tee /srv/containers/pihole/Information
  echo "$var1" | sudo tee -a /srv/containers/pihole/Information
  echo "0.0.0.0" | sudo tee -a /srv/containers/pihole/Information
  echo "pihole" | sudo tee -a /srv/containers/pihole/Information
  echo "macvlan" | sudo tee -a /srv/containers/pihole/Information

  sudo wget "$github"01-pihole -O /tmp/pihole
  sudo chmod +x /tmp/pihole
  sudo bash /tmp/pihole
}

function myspeed0 {
  sudo mkdir -p /srv/containers/myspeed-tracker/data
  sudo touch /srv/containers/myspeed-tracker/Information

  echo "myspeed-tracker" | sudo tee /srv/containers/myspeed-tracker/Information
  echo "172.25.0.4" | sudo tee -a /srv/containers/myspeed-tracker/Information

  sudo wget "$github"20-myspeed-tracker -O /tmp/myspeed-tracker
  sudo chmod +x /tmp/myspeed-tracker
  sudo bash /tmp/myspeed-tracker
}

function xpra0 {
  sudo mkdir -p /srv/containers/xpra-virt-manager/home
  sudo touch /srv/containers/xpra-virt-manager/Information

  echo "xpra-virt-manager" | sudo tee /srv/containers/xpra-virt-manager/Information
  echo "$var2" | sudo tee -a /srv/containers/xpra-virt-manager/Information
  echo "1920x1080" | sudo tee -a /srv/containers/xpra-virt-manager/Information
  echo "9876" | sudo tee -a /srv/containers/xpra-virt-manager/Information
  echo "172.25.0.5" | sudo tee -a /srv/containers/xpra-virt-manager/Information

  sudo wget "$github"45-xpra-virt-manager -O /tmp/xpra-virt-manager
  sudo chmod +x /tmp/xpra-virt-manager
  sudo bash /tmp/xpra-virt-manager
}

function scriptsrv0 {
  sudo mkdir -p /srv/containers/script-server/{scripts,runners}
  sudo touch /srv/containers/script-server/Information

  echo "script-server" | sudo tee /srv/containers/script-server/Information
  echo "172.25.0.6" | sudo tee -a /srv/containers/script-server/Information

  sudo wget "$github"70-script-server -O /tmp/script-server
  sudo chmod +x /tmp/script-server
  sudo bash /tmp/script-server
}

function openspeed0 {
  sudo mkdir -p /srv/containers/openspeedtest
  sudo touch /srv/containers/openspeedtest/Information

  echo "openspeedtest" | sudo tee /srv/containers/openspeedtest/Information
  echo "172.25.0.7" | sudo tee -a /srv/containers/openspeedtest/Information

  sudo wget "$github"16-openspeedtest -O /tmp/speedtest
  sudo chmod +x /tmp/speedtest
  sudo bash /tmp/speedtest
}

function menuB {
  var0=$(dialog --title 'Linite' --backtitle "L I N I T E" --menu " " 0 0 0 \
1 'Linux Essentials [All]' \
2 'RaspbberryPi & Tools [SoC Only]' \
3 'Server [No VM nor SoC]' \
4 'Virtual Machine [No VM nor SoC]' \
5 'Default Services [All]' \
X 'Sair' 2>&1 > /dev/tty )
case "$var0" in
1) essentials0 ;;
2) raspbian0 ;;
3) server0 ;;
4) VMs0 ;;
X) exit ;;
esac
}

function essentials0 {
dialog --title "Menu" --yesno "Deseja instalar os seguintes pacotes? \n
$list01" 25 40
[ $? = 0 ] && {
  sudo apt install $list01 --no-install-recommends -y &&
  menuB
  }
menuB
}

function raspbian0 {
dialog --title "Menu" --yesno "Deseja instalar os seguintes pacotes? \n
$list01 $package_2404" 25 40
[ $? = 0 ] && {
  sudo apt install $list01 $package_2404 --no-install-recommends -y &&
  menuB
}
menuB
}

function server0 {
dialog --title "Menu" --yesno "Deseja instalar os seguintes pacotes? \n
$list02" 25 40
[ $? = 0 ] && {
  sudo apt install $list02 --no-install-recommends -y &&
  menuB
  }
menuB
}

function VMs0 {
dialog --title "Menu" --yesno "Deseja instalar os seguintes pacotes? \n
$list00" 25 40
[ $? = 0 ] && {
  sudo apt install $list00 --no-install-recommends -y &&
  sudo usermod -aG libvirt "$USER"; sudo usermod -aG libvirt-qemu "$USER"
  menuB
  }
menuB
}

# WIP
function diskfun0 {
  UUID0=$(lsblk -o NAME,MOUNTPOINT | grep -v 'MOUNTPOINT' | awk '$2 == "" {print $1}')
  sudo mkfs.ext4 -FF -m 0 /dev/"$UUID0"
  UUID1=$(lsblk -f | grep "$UUID0" | awk '{print $4}')
  export UUID1
}

# ======================================================================================================================================================== #

function basicsys0 {
  welcome0 "Basic v1.0"
  bashconf0
  mkswap0
  timezone0
  update2
  useless0
  sysctl0
  the_end0
}

function linite0 {
  welcome0 "Generico v2.0"
  bashconf0
  mkswap0
  timezone0
  update0
  useless0
  pfsense0 "pfsense.img"
  sysctl0
  motd0
  journal0
  fstab0
  netplan1
  smbconf0
  beep0
  the_end0
}

function aarcharm0 {
  welcome0 "ARM v1.0"
  bashconf0
  mkswap0
  timezone0
  update1
  useless0
  netplan1
  sysctl0
  motd0
  journal0
  smbconf0
  the_end0
}

function appliance0 {
  welcome0 "Appliance v3.0"
  bashconf0
  passmgr0
  timezone0
  update0
  useless0
  pfsense0 "pfsense-modelo.img"
  macvlan0
  docker0
  sysctl0
  motd0
  journal0
  fstab0
  smbconf0
  beep0
  netplan0
  the_end0
}

root_check0
basic_struct0
hardsys0

exit 1
