#!/usr/bin/env bash

# ============================================================================ #

# HOW TO USE/INSTALL:
# curl -sSL https://m.linuxuniverse.com.br | bash

# ============================================================================ #

export mainrelease="DISTRIB_RELEASE=22.04"
export mainhard="Celeron(R) J4125"

usern4me="admin"
passw0rd="isorulez"

serverip="172.20.0.22"
lanhost="http://$serverip"
wanhost="http://z.net-freaks.com:3434"

export list00="docker.io docker-buildx \
net-tools speedtest-cli whois w3m w3m-img netdiscover iperf arp-scan traceroute sshpass fail2ban network-manager \
libatasmart-bin smartmontools zip unzip p7zip-full 7zip p7zip cifs-utils rsnapshot rclone iotop \
haveged beep stress lm-sensors cmatrix btop inxi tree hwloc figlet dialog \
gpm tmux xinit xorg openbox pavucontrol caja epiphany-browser gparted gnome-disk-utility terminator rdesktop \
qemu-system qemu-utils qemu-user qemu-kvm qemu-guest-agent libvirt-clients libvirt-daemon-system bridge-utils virt-manager ovmf dnsmasq genisoimage"

destpath="/var/lib/libvirt/images"
pathsrv="/srv/containers/scripts/config"

export NEEDRESTART_MODE=a
export DEBIAN_FRONTEND=noninteractive

# ============================================================================ #

# Check where to get the .img file
if ping -c 1 $serverip >/dev/null; then
  webadress="$lanhost"
else
  webadress="$wanhost"
fi

function sysctlconf {
echo -e "kernel.sysrq=1
vm.panic_on_oom=1
vm.swappiness=10
kernel.panic=5

#net.ipv4.ip_forward=1
#net.ipv6.conf.all.disable_ipv6=1
#net.ipv6.conf.default.disable_ipv6=1" | sudo tee -a /etc/sysctl.conf
}

function journaladjust {
echo "$password" | sudo -S echo -e "Storage=persistent
SystemMaxUse=5G
SystemKeepFree=10G" | sudo tee -a /etc/systemd/journald.conf
}

function tmpfstab {
echo "$password" | sudo -S echo -e "
# Temp to ram!
tmpfs /tmp tmpfs defaults 0 0
tmpfs /var/tmp tmpfs defaults 0 0" | sudo tee -a /etc/fstab
}

function netplan1 {
echo -e "
# This is the network config written by 'linite model 1'
network:
  ethernets:
#    renderer: NetworkManager
    eno1:
      dhcp4: true
      nameservers:
        addresses: [1.0.0.1, 8.8.4.4]
    enp1s0:
      dhcp4: true
      nameservers:
        addresses: [1.0.0.1, 8.8.4.4]
    enp2s0:
      dhcp4: true
      nameservers:
        addresses: [1.0.0.1, 8.8.4.4]
    enp4s0:
      dhcp4: true
      nameservers:
        addresses: [1.0.0.1, 8.8.4.4]
  version: 2" | sudo tee /etc/netplan/00-installer-config.yaml
}

function smbconfig {
  sudo mkdir -p /srv/containers/scripts/
  curl -sSL https://raw.githubusercontent.com/urbancompasspony/docker/main/SAMBA_Model/smbAD.conf | sudo tee /srv/containers/scripts/SMB-AD-Model.conf
}

function beep {
  wget https://raw.githubusercontent.com/urbancompasspony/linux.cheat.sheet/main/beep/beep.sh -O /home/administrador/.beep.sh
  sudo bash /home/administrador/.beep.sh
  echo "@reboot sleep 60; bash /home/administrador/.beep.sh" | tee /tmp/crontab_new
  sudo crontab -l | cat - /tmp/crontab_new | tee crontab.txt && sudo crontab crontab.txt
  rm /home/administrador/crontab.txt
}

function mkswap0 {
  [ -f /swapfile ] && {
    echo "Swap localizada!"
  } || {
    sudo dd if=/dev/zero of=/swapfile bs=1k count=1000000
    sudo chmod 0600 /swapfile
    sudo mkswap /swapfile; sudo swapon /swapfile
    echo "/swapfile none swap sw 0 0" | sudo tee -a /etc/fstab
    echo "Swap criada com sucesso."
  }
}

function motd00 {
  sudo apt update; sudo apt install figlet -y; sudo rm -R /etc/update-motd.d/*
  sudo wget https://raw.githubusercontent.com/urbancompasspony/server/main/MOTD/00-header -O /etc/update-motd.d/00-header
  sudo wget https://raw.githubusercontent.com/urbancompasspony/server/main/MOTD/20-sysinfo -O /etc/update-motd.d/20-sysinfo
  sudo wget https://raw.githubusercontent.com/urbancompasspony/server/main/MOTD/90-dynamic-motd -O /etc/update-motd.d/90-dynamic-motd
  sudo chmod +x /etc/update-motd.d/*
}

function installer {
  sudo apt install $1 --no-install-recommends -y
  sudo usermod -aG libvirt administrador
  sudo usermod -aG libvirt-qemu administrador
  return
}

function fstab0 {
echo -e "

# Disk 01
#/dev/disk/by-uuid/ /mnt/main ext4 defaults 0 0

# Disk 02
#/dev/disk/by-uuid/ /mnt/backup ext4 defaults 0 0" | sudo tee -a /etc/fstab
}

function startvm {
  [ -f /var/lib/libvirt/images/pfsense.img ] && {
    create_pfsense
  } || {
    clear
    sudo wget --user $usern4me --password $passw0rd $webadress/$1 -O $destpath/$1

    create_pfsense
  }

}

function create_pfsense {
# enp1s0 = ETH0
# enp2s0 = ETH1
# eno1 = enp3s0 = ETH2
# ETH3 is macvlan docker

  virt-install --import \
--name pfSense \
--boot hd,cdrom,menu=on \
--memory 2048 \
--vcpus 2 \
--cpu host \
--network type=direct,source=enp1s0,source_mode=bridge,mac=52:54:00:55:ea:01 \
--network type=direct,source=enp2s0,source_mode=bridge,mac=52:54:00:55:ea:02 \
--network type=direct,source=eno1,source_mode=bridge,mac=52:54:00:55:ea:03 \
--disk /var/lib/libvirt/images/pfsense.img \
--os-variant=freebsd13.1 \
--graphics spice \
--import \
--autostart 1>/dev/null 2>/dev/null &
}

function set_docker {
  sudo docker network create -d macvlan --subnet="172.25.0.0"/24 --gateway="172.25.0.1" -o parent="enp4s0" macvlan
}

function containers0 {
# PiHole
sudo mkdir -p /srv/containers/pihole/{etc,log,dnsmasq.d}

  sudo docker run -d \
--name=pihole \
--network macvlan \
--ip=172.25.0.2 \
--dns=1.1.1.1  \
--hostname=pihole \
--no-healthcheck \
--restart=unless-stopped \
--shm-size=512m \
-e SERVERIP=172.25.0.2 \
-e WEBPASSWORD=p4ssw0rd \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/pihole/etc/:/etc/pihole \
-v /srv/containers/pihole/dnsmasq.d/:/etc/dnsmasq.d \
-v /srv/containers/pihole/log/:/var/log/pihole \
-p 80:80 \
-p 443:443 \
-p 67:67/tcp \
-p 67:67/udp \
-p 53:53/tcp \
-p 53:53/udp \
pihole/pihole:latest

# OpenSpeedTest
  sudo docker run -d \
--name=openspeedtest \
--network macvlan \
--ip=172.25.0.3 \
--dns=1.1.1.1  \
--dns=127.0.0.1 \
--hostname=openspeedtest \
--no-healthcheck \
--restart=unless-stopped \
-p 3000:3000 \
-p 3001:3001 \
-v /etc/localtime:/etc/localtime:ro \
openspeedtest/latest

# MySpeed
sudo mkdir -p /srv/containers/myspeed/data

  sudo docker run -d \
--name=myspeed \
--network macvlan \
--ip=172.25.0.4 \
--dns=1.1.1.1  \
--dns=127.0.0.1 \
--hostname=myspeed \
--no-healthcheck \
--restart=unless-stopped \
-p 5216:5216 \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/myspeed/data:/myspeed/data \
germannewsmaker/myspeed

# XPRA
sudo mkdir -p /srv/containers/xpra-virt-manager/home

    sudo docker run -d \
--privileged \
--name=xpra-virt-manager \
--network macvlan \
--ip=172.25.0.5 \
--dns=1.1.1.1  \
--dns=127.0.0.1 \
--hostname=xpra-virt-manager \
--no-healthcheck \
--restart=unless-stopped \
--device /dev/kvm:/dev/kvm \
-e DARK_MODE=true \
-e HOSTS="['qemu:///system']" \
-e passw0rd="$var2" \
-e resolution=1920x1080 \
-e PORTS=9876 \
-v /etc/localtime:/etc/localtime:ro \
-v /srv/containers/xpra-virt-manager/home:/home \
-v /var/lib/libvirt/images:/var/lib/libvirt/images \
-v /var/run/libvirt/libvirt-sock:/var/run/libvirt/libvirt-sock \
-v /dev/disk/by-id:/dev/disk/by-id \
urbancompasspony/xpra-virt-manager:latest &
}

# ============================================================================ #

[ "$EUID" -ne 0 ] || {
  clear
  echo "Não execute esse script como Root!"
  exit
}

hardversion=$(cat /proc/cpuinfo | grep 'model name' | head -n 1 | awk -F: '{ print $2 }' | cut -d ' ' -f 3,4)

[ "$hardversion" = "$mainhard" ] && {
  clear; echo "Hardware adequado, prosseguindo!"; sleep 1
} || {
  clear; echo ""; echo "HARDWARE INADEQUADO DETECTADO!"
  echo "Este sistema exige o hardware 'Appliance 4x Gigabit Celeron J4125' e voce esta usando o $hardversion"
  echo "SAINDO...."
  sleep 10
  exit
}

sysversion=$(cat /etc/lsb-release | awk -F: '/RELEASE/ {print $0}' | awk '{print $1}')

[ "$sysversion" = "$mainrelease" ] && {
  clear; echo "Versão do Ubuntu Server adequado, prosseguindo!"; sleep 1
} || {
  clear
  echo ""
  echo "SISTEMA INADEQUADO DETECTADO!"
  echo "Este script exige o Ubuntu 22.04 e você está usando o $sysversion"
  echo "SAINDO...."
  sleep 10
  exit
}

[ -f /home/administrador/.installed ] && {
  clear; echo ""; echo "Este sistema já foi configurado. Saindo..."; echo ""; sleep 3
  exit
} || {
  clear; echo ""; echo "Bem vindo ao Preparo de Sistema - v1.0"
  echo "Se esta executando esse comando apos instalar o Ubuntu Server AutoInstaller, a senha padrao eh: ubuntu"; sleep 5
  echo "5"; sleep 1; echo "4"; sleep 1; echo "3"; sleep 1; echo "2"; sleep 1; echo "1"; sleep 1
  clear; echo "Preparando sistema.... e configurando bashrc"; echo ""
  curl -sSL https://raw.githubusercontent.com/urbancompasspony/bashrc/main/install.sh | bash
  . .bashrc
  sudo mkdir -p "$destpath"; sudo chmod 777 -R "$destpath"; sudo mkdir -p "$pathsrv"
  clear; echo "Criando swapfile caso não exista"
  mkswap0
  clear; echo "Removendo pacotes inuteis"; echo ""
  sudo apt purge needrestart cloud-init snapd unattended-upgrades plank deja-dup evolution evolution-data-server bluez blueman bluetooth -y
  clear; echo "Atualizando o sistema"; echo ""
  sudo apt update; sudo apt upgrade -y; sudo apt autoremove -y; clear; echo "Instalando pacotes...."
  installer "$list00"; sleep 3
  clear; echo "Validando usuario Administrador para CONTAINERS"
  sudo usermod -aG docker administrador
  sleep 3; clear; echo "Desativando serviços inuteis"
  sudo systemctl disable NetworkManager-wait-online.service; sudo systemctl mask NetworkManager-wait-online.service; sudo systemctl disable systemd-networkd-wait-online.service; sudo systemctl mask systemd-networkd-wait-online.service
  sleep 3; clear; echo "Aplicando recursos extras ao SYSCTL"
  sysctlconf
  sleep 3; clear; echo "Ajustando MOTD"
  motd00
  sleep 3; clear; echo "Ajustando JOURNAL"
  journaladjust
  sleep 3; clear; echo "Ajustando Netplan"
  netplan1; sudo netplan apply
  sleep 3; clear; echo "Criando novos /tmp"
  tmpfstab
  sleep 3; clear; echo "Dando permissoes ao LibVirt"
  sudo chmod 777 /var/run/libvirt/libvirt-sock
  sleep 3; clear; echo "Adicionando modelo SAMBA AD"
  smbconfig
  sleep 3; clear; echo "Adicionando entradas extras ao fstab"
  fstab0
  sleep 3; clear; echo "Criando um Beep bonitinho se tiver speaker no servidor!"
  beep
  sleep 3; clear; echo "Adicionando VM do pfSense"
  startvm
  sleep 10; clear; echo "Definindo MACVLAN para os containers"
  set_docker
  sleep 3; clear; echo "Inicializando containers!"
  containers0
  sleep 3; clear; echo "Instalação concluida!"
  sleep 5
  touch /home/administrador/.installed

  sudo reboot
}

exit 1
