#!/usr/bin/env bash

# ======================================================================================================================================================== #
# curl -L m.linuxuniverse.com.br | bash -i
# ======================================================================================================================================================== #

# Informations for the compliance Celeron:
#        enp1s0 = ETH0
#        enp2s0 = ETH1
# eno1 (enp3s0) = ETH2
# MACVLAN       = ETH3

export serverip="172.20.0.22"
export usern4me="admin"; export passw0rd="isorulez"

export lanhost="http://$serverip"; export wanhost="http://z.net-freaks.com:3434"

export NEEDRESTART_MODE=a; export DEBIAN_FRONTEND=noninteractive

export pathsrv="/srv/install"; export destpath="/var/lib/libvirt/images"
export github="https://raw.githubusercontent.com/urbancompasspony/docker/main/"

export list00="qemu-system qemu-utils qemu-user qemu-kvm qemu-guest-agent \
libvirt-clients libvirt-daemon-system bridge-utils virt-manager ovmf dnsmasq genisoimage guestfs-tools \
docker.io net-tools speedtest-cli whois netdiscover iperf arp-scan traceroute sshpass network-manager dkms r8168-dkms \
libatasmart-bin smartmontools zip unzip p7zip-full 7zip p7zip cifs-utils rsnapshot rclone iotop \
haveged stress lm-sensors cmatrix btop inxi tree dialog btrfs-progs build-essential unrar lz4 duf \
openvpn curl nmap parallel rclone openssh-server samba samba-dsdb-modules samba-vfs-modules beep xinit xorg openbox xdotool \
gpm tmux pavucontrol caja epiphany-browser gparted cmatrix gnome-disk-utility terminator rdesktop pluma terminator xmlstarlet"

# ======================================================================================================================================================== #

function root_check0 {
  [ "$EUID" -ne 0 ] || {
    clear
    echo "Não execute este script como Root! DICA: Remova o SUDO do comando ou execute-o como usuario local."; echo ""
    exit
  }
}

function hardsys0 {
  export sysmain1="DISTRIB_RELEASE=22.04"; export sysmain2="DISTRIB_RELEASE=24.04"
  sysversion=$(cat /etc/lsb-release | awk -F: '/RELEASE/ {print $0}' | awk '{print $1}')
  export hardmain="Celeron(R) J4125"; hardversion=$(cat /proc/cpuinfo | grep 'model name' | head -n 1 | awk -F: '{ print $2 }' | cut -d ' ' -f 3,4)

  # Se hardware e sistema estão ok, é o Appliance! Do contrario é generico.
  [ "$sysversion" = "$sysmain" ] && [ "$hardversion" = "$hardmain" ] && {
    appliance0
  } || {
    linite0
    }
}

function welcome0 {
  clear; echo ""; echo "Preparo de Servidor $1 by SuitIT®"; echo ""
  [ -f "$pathsrv"/finished ] || [ -f /home/administrador/.installed ] && {
    clear; echo ""; echo "Este servidor ja foi configurado previamente."; sleep 3
    exit
  } || {
    [ -f "$pathsrv"/information ] && {
      echo "A senha foi previamente alterada. Use a nova senha!"; echo ""
      sudo touch /srv/settings.yaml
    } || {
      echo "Insira a senha padrao. Senha padrao: ubuntu"; echo ""
      sudo touch /srv/settings.yaml
    }
  }
  echo ""; echo "5"; sleep 1; echo "4"; sleep 1; echo "3"; sleep 1; echo "2"; sleep 1; echo "1"; sleep 1
}

function bashconf0 {
  clear; echo "Preparando sistema e configurando BASH"; echo ""
  sudo mkdir -p "$destpath"; sudo chmod 777 -R "$destpath"; sudo mkdir -p "$pathsrv"
  curl -sSL https://raw.githubusercontent.com/urbancompasspony/bashrc/main/install.sh | bash
}

function mkswap0 {
  [ -f /swapfile ] || [ -f /swap.img ] && {
    echo "." >/dev/zero
  } || {
    clear; echo "Swap não encontrado, criando..."
    sudo dd if=/dev/zero of=/swapfile bs=1k count=1000000
    sudo chmod 0600 /swapfile
    sudo mkswap /swapfile; sudo swapon /swapfile
    echo "/swapfile none swap sw 0 0" | sudo tee -a /etc/fstab
  }
}

function menupass0 {
  VALUE1="Passw0rd"; VALUE2=""; VALUE3=""
  VALUE0=$(dialog --cancel-label "Sair da Instalacao" --ok-label "Iniciar Instalacao" --title "Novo Servidor" --form "Defina a senha do Administrador:" 11 50 0 \
"Administrador:" 1 1 "$VALUE1" 1 15 40 0 \
3>&1 1>&2 2>&3 3>&- > /dev/tty)
  [ $? -ne 0 ] && cancel_user
  var1=$(echo "$VALUE0" | sed -n 1p)
  check0
}

function check0 {
  [ "$var1" = "" ] && {
    clear; echo ""; echo "Nao deixe nenhum campo em branco!"; sleep 2;
    menu0
  } || {
    echo . >/dev/null
  }
}

function cancel_user {
  clear; echo ""; echo "A INSTALACAO FOI CANCELADA PELO USUARIO."; echo ""
  exit
}

function timezone0 {
  sudo timedatectl set-timezone Etc/GMT+3
  sudo timedatectl set-local-rtc 1
}

function useless0 {
    clear; echo "Removendo pacotes e desativando servicos inuteis"; echo ""
    sudo apt purge needrestart cloud-init snapd unattended-upgrades plank deja-dup evolution evolution-data-server bluez blueman bluetooth -y

    cat <<EOF | sudo tee /etc/apt/preferences.d/nosnap.pref
# To prevent repository packages from triggering the installation of Snap,
# this file forbids snapd from being installed by APT.
# For more information: https://linuxmint-user-guide.readthedocs.io/en/latest/snap.html
Package: snapd
Pin: release a=*
Pin-Priority: -10
EOF

    sudo apt-mark hold snapd
    sudo systemctl stop systemd-networkd-wait-online.service
    sudo systemctl disable systemd-networkd-wait-online.service
    sudo systemctl mask systemd-networkd-wait-online.service
}

function update0 {
  clear; echo "Atualizando o sistema"; echo ""
  sudo apt update; sudo apt upgrade -y; sudo apt autoremove -y; clear

  echo "Instalando pacotes...."
  sudo apt install $list00 -y &&
  sync &&

  sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
  sudo chmod +x /usr/local/bin/yq

  sudo systemctl stop NetworkManager-wait-online.service
  sudo systemctl disable NetworkManager-wait-online.service
  sudo systemctl mask NetworkManager-wait-online.service

  sudo usermod -aG libvirt administrador
  sudo usermod -aG libvirt-qemu administrador
  sudo usermod -aG docker administrador
}

function netplan0 {
  [ -f "$pathsrv"/netplan_ok ] && {
    clear; echo "O Netplan ja foi ajustado. Continuando."; echo ""; sleep 2
  } || {
    sleep 3; clear; echo "Ajustando Netplan"
    echo -e "
# This is the network config written by 'linite model-1' script
network:
  ethernets:
#    renderer: NetworkManager
    eno1:
      dhcp4: true
      nameservers:
        addresses: [1.1.1.1, 8.8.8.8]
    enp1s0:
      dhcp4: true
      nameservers:
        addresses: [1.1.1.1, 8.8.8.8]
    enp2s0:
      dhcp4: true
      nameservers:
        addresses: [1.1.1.1, 8.8.8.8]
    enp4s0:
      dhcp4: false
      addresses: [172.25.0.3/24]
      routes:
      - to: default
        via: 192.168.0.1
      nameservers:
        addresses: [1.1.1.1, 8.8.8.8]
  version: 2" | sudo tee /etc/netplan/00-installer-config.yaml
    sudo netplan apply && sudo touch "$pathsrv"/netplan_ok
  }
}

function netplan1 {
  [ -f "$pathsrv"/netplan_ok ] && {
    clear; echo "O Netplan ja foi ajustado. Continuando."; echo ""; sleep 2
  } || {
    echo -e "
#
#network:
#    ethernets:
#        renderer: NetworkManager
#        enp4s0:
#            addresses: [192.168.250.10/24]
#            routes:
#            - to: default
#              via: 192.168.120.254
#            dhcp4: no
##           optional: true
#            nameservers:
#              addresses: [192.168.250.1]
#              #addresses: [200.225.197.34, 200.225.197.37] 
#              #addresses: [200.175.89.139, 200.175.5.139]
#              #addresses: [8.8.4.4, 8.8.8.8]
#              #addresses: [1.1.1.1, 1.0.0.1]
#    version: 2" | sudo tee -a /etc/netplan/00-installer-config.yaml

echo -e "
#
#network:
#  ethernets:
#    eth0:
#      dhcp4: true
#      optional: true

#    eth1: # THIS!
#      dhcp4: no
#      optional: true
#      addresses: [172.16.1.2/24]
#  version: 2" | sudo tee -a /etc/netplan/00-installer-config.yaml

    sudo touch "$pathsrv"/netplan_ok
  }
}

function pfsense0 {
  [ -f "$pathsrv"/pfsense_ok ] && {
    clear; echo "O pfSense ja foi configurado. Continuando."; echo ""; sleep 2
  } || {
    sleep 3; clear; echo "Adicionando pfSense como VM"
    
    if ping -c 1 $serverip >/dev/null; then
      webadress="$lanhost"
    else
      webadress="$wanhost"
    fi

    [ -f "$destpath"/"$1" ] && {
      sudo chmod 777 /var/run/libvirt/libvirt-sock
    } || {
      clear; sudo wget --user $usern4me --password $passw0rd $webadress/"$1" -O $destpath/"$1" &&
      sudo chmod 777 /var/run/libvirt/libvirt-sock
      }

    sudo touch "$pathsrv"/pfsense_ok
  }
}

function pfsense1 {
    sudo virt-install --import \
--name pfSense \
--boot hd,cdrom,menu=on \
--memory 2048 \
--vcpus 2 \
--cpu host \
--network type=direct,source=enp1s0,source_mode=bridge,mac=52:54:00:55:ea:01 \
--network type=direct,source=enp2s0,source_mode=bridge,mac=52:54:00:55:ea:02 \
--network type=direct,source=eno1,source_mode=bridge,mac=52:54:00:55:ea:03 \
--disk /var/lib/libvirt/images/"$1" \
--os-variant=freebsd13.1 \
--graphics vnc \
--import \
--autostart 1>/dev/null 2>/dev/null &
    sleep 3; clear
}

function sysctl0 {
  [ -f "$pathsrv"/sysctl_ok ] && {
    clear; echo "O SYSCTL ja foi modificado. Continuando."; echo ""; sleep 2
  } || {
    sleep 3; clear; echo "Aplicando recursos extras ao SYSCTL"
    echo -e "kernel.sysrq=1
vm.panic_on_oom=1
vm.swappiness=10
kernel.panic=5
#net.ipv4.ip_forward=1
#net.ipv6.conf.all.disable_ipv6=1
#net.ipv6.conf.default.disable_ipv6=1" | sudo tee -a /etc/sysctl.conf &&
    sudo touch "$pathsrv"/sysctl_ok
  }
}

function motd0 {
  [ -f "$pathsrv"/motd_ok ] && {
    clear; echo "O MOTD ja foi substituido. Continuando."; echo ""; sleep 2
  } || {
    sleep 3; clear; echo "Ajustando tela de boas vindas do servidor"
    sudo rm -R /etc/update-motd.d/*
    curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/MOTD/00-header | sudo tee /etc/update-motd.d/00-header
    curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/MOTD/20-sysinfo | sudo tee /etc/update-motd.d/20-sysinfo
    curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/MOTD/90-dynamic-motd | sudo tee /etc/update-motd.d/90-dynamic-motd
    sudo chmod +x /etc/update-motd.d/*
    sudo touch "$pathsrv"/motd_ok
  }
}

function journal0 {
  [ -f "$pathsrv"/journal_ok ] && {
    clear; echo "O JournalCTL ja foi ajustado. Continuando."; echo ""; sleep 2
  } || {
    sleep 3; clear; echo "Ajustando JOURNAL"
    echo -e "
Storage=persistent
SystemMaxUse=5G
SystemKeepFree=10G" | sudo tee -a /etc/systemd/journald.conf &&
    sudo touch "$pathsrv"/journal_ok
  }
}

function fstab0 {
  [ -f "$pathsrv"/fstab_ok ] && {
    clear; echo "O fstab ja foi ajustado de acordo. Continuando."; echo ""; sleep 2
  } || {
    sudo mkdir /mnt/disk01
    sudo mkdir /mnt/disk02

    sleep 3; clear; echo "Adicionando entradas extras ao fstab"

    echo -e "
# Temp to ram!
tmpfs /tmp tmpfs defaults 0 0
tmpfs /var/tmp tmpfs defaults 0 0

# Disk01 - Main Disk
# /dev/disk/by-uuid/ /mnt/disk01 ext4 defaults 0 0

# Disk02 - Backup
# /dev/disk/by-uuid/ /mnt/disk02 ext4 defaults 0 0

# Acesso Externo
# //172.25.0.X/folder /mnt/folder cifs credentials=/home/administrador/.smb,iocharset=utf8,file_mode=0777,dir_mode=0777,noperm,user,vers=2.1,nofail,x-systemd.automount,x-systemd.requires=network-online.target,x-systemd.device-timeout=3 0 0" | sudo tee -a /etc/fstab &&

    sudo touch "$pathsrv"/fstab_ok
  }
}

function beep0 {
  [ -f "$pathsrv"/beep ] && {
    clear; echo "O beep ja foi adicionado. Continuando."; echo ""; sleep 2
  } || {
    sleep 3; clear; echo "Criando um Beep bonitinho se tiver speaker no servidor!"
    wget https://raw.githubusercontent.com/urbancompasspony/linux.cheat.sheet/main/beep/beep.sh -O /home/administrador/.beep.sh
    clear; echo "Beep instalado. Testando..."; sudo bash /home/administrador/.beep.sh

    #no sudo
    #(crontab -l 2>/dev/null; echo '@reboot sleep 60; bash /home/administrador/.beep.sh') | sort -u | crontab -

    #sudo
    (sudo crontab -l 2>/dev/null; echo '@reboot sleep 60; bash /home/administrador/.beep.sh') | sort -u | sudo crontab -

    sudo yq -i ".Informacoes.Beep = \"Ativo\"" /srv/settings.yaml
  }
}

function adjusting0 {
  sudo mkdir -p /srv/scripts/config
# ------------------------------------------------------------------------------------------------------------------------------
  wget "https://raw.githubusercontent.com/urbancompasspony/docker/main/Backup/01-Backup"
  cat 01-Backup | sudo tee /srv/scripts/backupcont
  sudo rm -r 01-Backup
# ------------------------------------------------------------------------------------------------------------------------------
  wget "https://raw.githubusercontent.com/urbancompasspony/linux.cheat.sheet/main/rsnapshot.conf"
  cat rsnapshot.conf | sudo tee /srv/scripts/rsnapshot
  sudo rm -r rsnapshot.conf
# ------------------------------------------------------------------------------------------------------------------------------
  sudo yq -i '.rsnapshots += ["#00 7,10,13,16,19,22 * * 1-5 /usr/bin/rsnapshot -c /srv/scripts/rsnapshot alpha", "#00 23 * * 1-5 /usr/bin/rsnapshot -c /srv/scripts/rsnapshot beta", "#00 7 * * 6 /usr/bin/rsnapshot -c /srv/scripts/rsnapshot gamma"]' /srv/settings.yaml
  cron_rsnap
# ------------------------------------------------------------------------------------------------------------------------------
  IPMachine=$(ip route get 1.1.1.1 | grep -oP 'src \K\S+')
  sudo yq -i ".Informacoes.IP_LAN_Install = \"${IPMachine}\"" /srv/settings.yaml
# ------------------------------------------------------------------------------------------------------------------------------
  sudo inxi -M | awk '
/Machine:/ {machine=1; next}
machine && NF {
  sub(/^ *Type: /, "", $0); type=$0;
  getline;
  sub(/^ *Mobo: /, "", $0); mobo=$0;
  machine=0
}
END {
  # Remove control characters
  gsub(/[\x00-\x1F\x7F]/, "", type);
  gsub(/[\x00-\x1F\x7F]/, "", mobo);

  print "Hardware:"
  print "  Tipo: \"" type "\""
  print "  Placa: \"" mobo "\""
}
' | sudo tee -a /srv/settings.yaml
# ------------------------------------------------------------------------------------------------------------------------------
  [ -f /sys/firmware/acpi/tables/MSDM ] && {
    serial0=$(sudo hexdump -s 56 -e '"Serial key: " /29 "%s\n"' /sys/firmware/acpi/tables/MSDM)
    sudo yq -i ".Informacoes.Serial_Windows = \"${serial0}\"" /srv/settings.yaml
  } || {
    sudo yq -i ".Informacoes.Serial_Windows = \"Inexistente\"" /srv/settings.yaml
  }
# ------------------------------------------------------------------------------------------------------------------------------
  datetime0=$(date +"%d/%m/%Y - %H:%M")
  sudo yq -i ".Informacoes.Data_Instalacao = \"${datetime0}\"" /srv/settings.yaml
  sudo yq -i ".Informacoes.Data_Restauracao = \"Nunca foi reinstalado\"" /srv/settings.yaml
# ------------------------------------------------------------------------------------------------------------------------------
}

function cron_rsnap {
YAML="/srv/settings.yaml"
TMP_CRON=$(mktemp)

# Pega o crontab atual do root (ou vazio se não existir)
sudo crontab -l 2>/dev/null > "$TMP_CRON"

# Para cada job no YAML
yq -r '.rsnapshots[]' "$YAML" | while read -r CRON_LINE; do
    if grep -Fxq "$CRON_LINE" "$TMP_CRON"; then
        echo "Job já existe no crontab: $CRON_LINE"
    else
        echo "$CRON_LINE" >> "$TMP_CRON"
        echo "Adicionado job: $CRON_LINE"
    fi
done

# Aplica o novo crontab ao root
sudo crontab "$TMP_CRON"
rm -f "$TMP_CRON"
}

function the_end0 {
  sudo touch "$pathsrv"/finished
  clear; echo "Instalação concluida!"
  echo "Reiniciando sistema..."; sleep 3
  sudo reboot
}

function smbconf0 {
  clear; echo "Adicionando modelo SAMBA AD"
  curl -sSL https://raw.githubusercontent.com/urbancompasspony/docker/main/SAMBA_Model/smbAD.conf | sudo tee /srv/scripts/config/SMB-AD-Model.conf
}

# ======================================================================================================================================================== #

function linite0 {
  welcome0 "Generico v3.0"
  bashconf0
  mkswap0
  timezone0
  useless0
  update0
  pfsense0 "pfsense.img"
  sysctl0
  motd0
  journal0
  fstab0
  netplan1
  smbconf0
  beep0
  adjusting0
  the_end0
}

function appliance0 {
  welcome0 "Appliance v3.0"
  bashconf0
  menupass0
  timezone0
  useless0
  update0
  pfsense0 "pfsense-modelo.img"
  pfsense1
  sysctl0
  motd0
  journal0
  fstab0
  smbconf0
  netplan0
  beep0
  adjusting0
  the_end0
}

root_check0
hardsys0

exit 1
