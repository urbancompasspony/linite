#!/usr/bin/env bash

# ======================================================================================================================================================== #
# curl -L m.linuxuniverse.com.br | bash -i
# ======================================================================================================================================================== #

MENU_VERSION="v3.3 - 23-07-2025"

# Informations for the compliance Celeron:
#        enp1s0 = ETH0
#        enp2s0 = ETH1
# eno1 (enp3s0) = ETH2
# MACVLAN       = ETH3

export LANG=C
export LC_ALL=C

export yamlbase="/srv/system.yaml"
export yamlextra="/srv/containers.yaml"

export serverip="172.20.0.22"
export usern4me="admin"; export passw0rd="isorulez"

export lanhost="http://$serverip"; export wanhost="http://z.net-freaks.com:3434"

export NEEDRESTART_MODE=a; export DEBIAN_FRONTEND=noninteractive

export destpath="/var/lib/libvirt/images"
export github="https://raw.githubusercontent.com/urbancompasspony/docker/main/"

# All (+arm32)
export list00="qemu-system qemu-utils qemu-user qemu-kvm qemu-guest-agent \
libvirt-clients libvirt-daemon-system bridge-utils virt-manager ovmf dnsmasq genisoimage guestfs-tools \
docker.io net-tools speedtest-cli whois netdiscover iperf arp-scan traceroute sshpass network-manager dkms r8168-dkms \
libatasmart-bin smartmontools zip unzip p7zip-full 7zip p7zip cifs-utils rsnapshot rclone iotop detox fdupes \
haveged stress lm-sensors cmatrix btop inxi tree dialog btrfs-progs build-essential unrar lz4 duf \
caja xinit xorg openbox xdotool dbus-x11 dbus-user-session \
openvpn curl nmap parallel rclone openssh-server beep cmatrix pavucontrol \
tmux  gparted gnome-disk-utility terminator rdesktop pluma terminator xmlstarlet screen"

# ARM64 RPi5
export list01="docker-buildx mesa-vulkan-drivers mesa-utils vulkan-tools"

# x86_64
export list02="gpm qemu-block-supplemental"

# ======================================================================================================================================================== #

function root_check0 {
  [ "$EUID" -ne 0 ] || {
    clear
    echo "Não execute este script como Root! DICA: Remova o SUDO do comando ou execute-o como usuario local."; echo ""
    exit
  }
}

function hardsys0 {
  sysmain1="DISTRIB_RELEASE=22.04"
  sysversion=$(cat /etc/lsb-release | awk -F: '/RELEASE/ {print $0}' | awk '{print $1}')
  hardmain="Celeron(R) J4125"
  hardversion=$(cat /proc/cpuinfo | grep 'model name' | head -n 1 | awk -F: '{ print $2 }' | cut -d ' ' -f 3,4)

  if [ "$HOSTTYPE" = "aarch64" ]; then
    arm0
  elif [ "$HOSTTYPE" = "arm" ]; then
    arm1
  elif [ "$sysversion" = "$sysmain1" ] && [ "$hardversion" = "$hardmain" ]; then
    appliance0
  else
    linite0
  fi
}

function welcome0 {
  clear; echo ""; echo "Preparo de Servidor $MENU_VERSION by SuitIT®"; echo ""
  if [ -f "$yamlbase" ]; then
    clear; echo ""; echo "Este servidor ja foi configurado e está no Modelo CdN."; sleep 1
    echo ""; echo "Caso precise reinstala-lo ou restaura-lo utilize o Painel CdN!"; sleep 1
    exit
  else
    echo "Insira a senha padrao. Senha padrao: ubuntu"; echo ""
    sudo touch "$yamlbase"
  fi
  echo ""; echo "5"; sleep 1; echo "4"; sleep 1; echo "3"; sleep 1; echo "2"; sleep 1; echo "1"; sleep 1
}

function bashconf0 {
  clear; echo "Preparando sistema e configurando BASH"; echo ""
  sudo mkdir -p "$destpath"; sudo chmod 777 -R "$destpath"
  curl -sSL https://raw.githubusercontent.com/urbancompasspony/bashrc/main/install.sh | bash
}

function mkswap0 {
  local swap_file=""
  local swap_size=0
  
  # Verifica qual arquivo de swap existe
  if [ -f /swap.img ]; then
    swap_file="/swap.img"
  elif [ -f /swapfile ]; then
    swap_file="/swapfile"
  fi
  
  # Se encontrou um arquivo de swap, verifica o tamanho
  if [ -n "$swap_file" ]; then
    # Obtém o tamanho do arquivo em bytes
    swap_size=$(stat -c%s "$swap_file" 2>/dev/null || echo 0)
    # Converte para GB (1GB = 1000000000 bytes)
    swap_size_gb=$((swap_size / 1000000000))
    
    if [ $swap_size_gb -lt 1 ]; then
      clear; echo "Swap encontrado mas com menos de 1GB ($swap_size_gb GB), recriando..."
      
      # Desativa o swap atual se estiver ativo
      sudo swapoff "$swap_file" 2>/dev/null || true
           
      # Remove o arquivo antigo
      sudo rm -f "$swap_file"
      
      # Cria novo swap
      sudo dd if=/dev/zero of=/swapfile bs=1k count=1000000
      sudo chmod 0600 /swapfile
      sudo mkswap /swapfile
      sudo swapon /swapfile
      #echo "/swapfile none swap sw 0 0" | sudo tee -a /etc/fstab
      
      clear; echo "Swap recriado com 1GB!"
    else
      clear; echo "Swap encontrado com tamanho adequado (${swap_size_gb}GB), ignorando..."
    fi
  else
    clear; echo "Swap não encontrado, criando um novo..."
    sudo dd if=/dev/zero of=/swapfile bs=1k count=1000000
    sudo chmod 0600 /swapfile
    sudo mkswap /swapfile
    sudo swapon /swapfile
    echo "/swapfile none swap sw 0 0" | sudo tee -a /etc/fstab
    clear; echo "Swap criado com 1GB!"
  fi
}

function timezone0 {
  sudo timedatectl set-timezone Etc/GMT+3
  sudo timedatectl set-local-rtc 1
}

function useless0 {
  clear; echo "Removendo pacotes desnecessarios"; echo ""

  sudo apt purge snapd needrestart cloud-init unattended-upgrades bluez blueman bluetooth -y
  sudo apt autoremove -y
  sudo apt-mark hold snapd; sudo apt-mark hold snap

  cat <<EOF | sudo tee /etc/apt/preferences.d/nosnap.pref
Package: snapd
Pin: release a=*
Pin-Priority: -10
EOF
}

function update0 {
  clear; echo "Atualizando o sistema e desativando serviços inuteis"; echo ""
  sudo apt update; sudo apt upgrade -y; sudo apt autoremove -y; clear

  echo "Instalando pacotes...."
  if [ "$HOSTTYPE" = "aarch64" ]; then
    sudo apt install $list00 $list01 -y
    sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm64 -O /usr/local/bin/yq
    sudo chmod +x /usr/local/bin/yq
    services0
  elif [ "$HOSTTYPE" = "x86_64" ]; then
    sudo apt install $list00 $list02 -y
    sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
    sudo chmod +x /usr/local/bin/yq
    services0
  else
    sudo apt install $list00 -y &&
    sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_arm -O /usr/local/bin/yq
    sudo chmod +x /usr/local/bin/yq
    services0
  fi
}

function services0 {
  sudo systemctl stop NetworkManager-wait-online.service; sudo systemctl disable NetworkManager-wait-online.service; sudo systemctl mask NetworkManager-wait-online.service
  sudo systemctl stop systemd-networkd-wait-online.service; sudo systemctl disable systemd-networkd-wait-online.service; sudo systemctl mask systemd-networkd-wait-online.service
  sudo systemctl daemon-reload

  sudo usermod -aG libvirt administrador; sudo usermod -aG libvirt-qemu administrador; sudo usermod -aG docker administrador
}

function sysctl0 {
  sleep 1; clear; echo "Aplicando recursos extras ao SYSCTL"
  echo -e "kernel.sysrq=1" | sudo tee /etc/sysctl.d/10-magic-sysrq.conf
  echo -e "vm.swappiness=10
vm.panic_on_oom=1
kernel.panic=5
#net.ipv4.ip_forward=1
#net.ipv6.conf.all.disable_ipv6=1
#net.ipv6.conf.default.disable_ipv6=1" | sudo tee /etc/sysctl.d/99-sysctl.conf
}

function motd0 {
  sleep 1; clear; echo "Ajustando tela de boas vindas do servidor"
  sudo rm -R /etc/update-motd.d/*
  curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/MOTD/00-header | sudo tee /etc/update-motd.d/00-header
  curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/MOTD/20-sysinfo | sudo tee /etc/update-motd.d/20-sysinfo
  curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/main/MOTD/90-dynamic-motd | sudo tee /etc/update-motd.d/90-dynamic-motd
  sudo chmod +x /etc/update-motd.d/*
}

function journal0 {
  sleep 1; clear; echo "Ajustando JOURNAL"
  echo -e "
Storage=persistent
SystemMaxUse=1G
SystemKeepFree=5G" | sudo tee -a /etc/systemd/journald.conf
}

function fstab0 {
  sudo mkdir /mnt/disk01; sudo mkdir /mnt/disk02; sleep 1; clear; echo "Adicionando entradas extras ao fstab"
  echo -e "
# Temp to ram!
tmpfs /tmp tmpfs defaults 0 0
tmpfs /var/tmp tmpfs defaults 0 0

# Disk01
# /dev/disk/by-uuid/ /mnt/disk01 ext4 defaults 0 0

# Disk02
# /dev/disk/by-uuid/ /mnt/disk02 ext4 defaults 0 0

# Acesso Externo (Se necessario)
# //172.25.0.X/pasta_rede /mnt/pasta_local cifs credentials=/home/administrador/.smb,iocharset=utf8,file_mode=0777,dir_mode=0777,noperm,user,vers=2.1,nofail,x-systemd.automount,x-systemd.requires=network-online.target,x-systemd.device-timeout=3 0 0" | sudo tee -a /etc/fstab
}

function firefox0 {
  sudo install -d -m 0755 /etc/apt/keyrings &&
  wget -q https://packages.mozilla.org/apt/repo-signing-key.gpg -O- | sudo tee /etc/apt/keyrings/packages.mozilla.org.asc > /dev/null &&
  gpg -n -q --import --import-options import-show /etc/apt/keyrings/packages.mozilla.org.asc | awk '/pub/{getline; gsub(/^ +| +$/,""); if($0 == "35BAA0B33E9EB396F59CA838C0BA5CE6DC6315A3") print "\nThe key fingerprint matches ("$0").\n"; else print "\nVerification failed: the fingerprint ("$0") does not match the expected one.\n"}' &&
  echo "deb [signed-by=/etc/apt/keyrings/packages.mozilla.org.asc] https://packages.mozilla.org/apt mozilla main" | sudo tee -a /etc/apt/sources.list.d/mozilla.list > /dev/null &&
  echo '
Package: *
Pin: origin packages.mozilla.org
Pin-Priority: 1000
' | sudo tee /etc/apt/preferences.d/mozilla &&
  sudo apt update; sudo apt install firefox -y
}

function yamls0 {
  # ----------------------------------------------------------------------------------------------------------------------------------------------------
  sudo mkdir -p /srv/scripts/config
  sudo touch "$yamlbase"
  # ----------------------------------------------------------------------------------------------------------------------------------------------------
  IPMachine=$(ip route get 1.1.1.1 | grep -oP 'src \K\S+')
  sudo yq -i ".Informacoes.IP_LAN_Install = \"${IPMachine}\"" "$yamlbase"
  # ----------------------------------------------------------------------------------------------------------------------------------------------------
  sudo inxi -M | awk '
/Machine:/ {machine=1; next}
machine && NF {
  sub(/^ *Type: /, "", $0); type=$0;
  getline;
  sub(/^ *Mobo: /, "", $0); mobo=$0;
  machine=0
}
END {
  gsub(/[\x00-\x1F\x7F]/, "", type);
  gsub(/[\x00-\x1F\x7F]/, "", mobo);
  print "Hardware:"
  print "  Tipo: \"" type "\""
  print "  Placa: \"" mobo "\""
}
' | sudo tee -a "$yamlbase"
  # ----------------------------------------------------------------------------------------------------------------------------------------------------
  if [ -f /sys/firmware/acpi/tables/MSDM ]; then
    serial0=$(sudo hexdump -s 56 -e '"Serial key: " /29 "%s\n"' /sys/firmware/acpi/tables/MSDM)
    sudo yq -i ".Informacoes.Serial_Windows = \"${serial0}\"" "$yamlbase"
  else
    sudo yq -i ".Informacoes.Serial_Windows = \"Inexistente\"" "$yamlbase"
  fi
  # ----------------------------------------------------------------------------------------------------------------------------------------------------
  if [ "$HOSTTYPE" = "x86_64" ]; then
    wget https://raw.githubusercontent.com/urbancompasspony/linux.cheat.sheet/main/beep/beep.sh -O /home/administrador/.beep.sh; chmod +x /home/administrador/.beep.sh
    (sudo crontab -l 2>/dev/null; echo "") | sudo crontab -
    (sudo crontab -l 2>/dev/null; echo "# BEEP!") | sudo crontab -
    (sudo crontab -l 2>/dev/null; echo "@reboot sleep 60; bash /home/administrador/.beep.sh") | sudo crontab -
    sudo yq -i ".Informacoes.Beep = \"Ativo\"" "$yamlbase"
  fi
  # ----------------------------------------------------------------------------------------------------------------------------------------------------
  # Support Pannel!
  curl -sSL https://raw.githubusercontent.com/urbancompasspony/server/refs/heads/main/Diagnostics/install.sh | sudo bash
  if [ "$HOSTTYPE" = "arm" ]; then
    clear; echo "Se for um sistema Chroot Mobile, pare este sistema, inicie novamente e reexecute a instalacao do Diagnostic Menu pelo menu SRV!"
    sleep 3
  fi
  # ----------------------------------------------------------------------------------------------------------------------------------------------------
}

function crontabs0 {
# ----------------------------------------------------------------------------------------------------------------------------------------------------
  # Backups CDN
  sudo mkdir /srv/.bkp
  (sudo crontab -l 2>/dev/null; echo "") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "# Backups CDN") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "00 02 * * * cp /srv/*.yaml /srv/.bkp/") | sudo crontab -
  # ----------------------------------------------------------------------------------------------------------------------------------------------------
  # Safe RSYNC! KISS
  (sudo crontab -l 2>/dev/null; echo "") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "# Safe Rsync") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo '#0 2 * * * mountpoint -q /mnt/disk01 && mountpoint -q /mnt/disk02 && rsync --delete -aHAXv --numeric-ids --sparse /origem /destino') | sudo crontab -
  # ----------------------------------------------------------------------------------------------------------------------------------------------------
  # RClone Example
  (sudo crontab -l 2>/dev/null; echo "") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "# RClone") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo '#0 2 * * * mountpoint -q /mnt/disk01 && rclone sync --max-age 24h --no-traverse --exclude "Lixeira/**" /mnt/disk01/ OneDrive:Backup_Servidor') | sudo crontab -
  # ----------------------------------------------------------------------------------------------------------------------------------------------------
  # Auto BackupCont
  sudo wget "https://raw.githubusercontent.com/urbancompasspony/docker/main/Backup/01-Backup" -O /srv/scripts/backupcont.sh; sudo chmod +x /srv/scripts/backupcont.sh
  (sudo crontab -l 2>/dev/null; echo "") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "# AutoBackup Containers") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "#00 02 * * * bash /srv/scripts/backupcont.sh") | sudo crontab -
  # ----------------------------------------------------------------------------------------------------------------------------------------------------
  # AutoLog Rotate for Domain
  sudo wget https://raw.githubusercontent.com/urbancompasspony/docker/refs/heads/main/Backup/backup-syslog -O /srv/scripts/autolog-dominio.sh; sudo chmod +x /srv/scripts/autolog-dominio.sh
  (sudo crontab -l 2>/dev/null; echo "") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "# AutoLog") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "#00 23 * * * bash /srv/scripts/autolog-dominio.sh") | sudo crontab -
  # ----------------------------------------------------------------------------------------------------------------------------------------------------
  # RansomExt
  sudo wget https://raw.githubusercontent.com/urbancompasspony/server/refs/heads/main/ransomext -O /srv/scripts/ransomext.sh; sudo chmod +x /srv/scripts/ransomext.sh
  (sudo crontab -l 2>/dev/null; echo "") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "# RansomExt") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "#00 7 * * * bash /srv/scripts/ransomext.sh") | sudo crontab -
  # ----------------------------------------------------------------------------------------------------------------------------------------------------
  # AutoDelete Trash for SMB!
  sudo wget https://raw.githubusercontent.com/urbancompasspony/docker/refs/heads/main/Backup/02-Models_AutoDelete -O /srv/scripts/deleterecycle.sh; sudo chmod +x /srv/scripts/deleterecycle.sh
  (sudo crontab -l 2>/dev/null; echo "") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "# Delete Trash") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "#0 6 * * * bash /srv/scripts/deleterecycle.sh") | sudo crontab -
  # ----------------------------------------------------------------------------------------------------------------------------------------------------
  # Perma Lixeira para Syncthing
  (sudo crontab -l 2>/dev/null; echo "") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "# Permissões da Lixeira do AD para Syncthing") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo '#0 2 * * * lixo0="/mnt/disk01/Domain/Lixeira/" && [ -d "$lixo0" ] && chmod 777 -R "$lixo0" 2>/dev/null || :') | sudo crontab -
  # ----------------------------------------------------------------------------------------------------------------------------------------------------
  # RSnapshots
  sudo wget "https://raw.githubusercontent.com/urbancompasspony/linux.cheat.sheet/main/rsnapshot.conf" -O /srv/scripts/rsnapshot.conf; sudo chmod +x /srv/scripts/rsnapshot.conf
  (sudo crontab -l 2>/dev/null; echo "") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "# RSnapshots") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "# Alpha - Executa as 7h, 10h, 12h, 14h, 16h e 18h! 6x por dia") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "#00 7,10,12,14,16,18 * * * mountpoint -q /mnt/disk01 && mountpoint -q /mnt/disk02 && /usr/bin/rsnapshot -c /srv/scripts/rsnapshot.conf alpha") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "# Beta - A partir das 20:00 5x na Semana cobrindo sabados mas nao domingos") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "#00 20 * * 1-5 mountpoint -q /mnt/disk01 && mountpoint -q /mnt/disk02 && /usr/bin/rsnapshot -c /srv/scripts/rsnapshot.conf beta") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "# Gamma - 1x na Semana aos domingos, perdurando 4x, aprox. 1 mes") | sudo crontab -
  (sudo crontab -l 2>/dev/null; echo "#00 6 * * 0 mountpoint -q /mnt/disk01 && mountpoint -q /mnt/disk02 && /usr/bin/rsnapshot -c /srv/scripts/rsnapshot.conf gamma") | sudo crontab -
  # ----------------------------------------------------------------------------------------------------------------------------------------------------
}

function netplan0 {
    sleep 1; clear; echo "Ajustando Netplan"
    echo -e "
# This is the network config written by 'linite model-1' script
network:
  ethernets:
#    renderer: NetworkManager
    eno1:
      dhcp4: true
      nameservers:
        addresses: [1.1.1.1, 8.8.8.8]
    enp1s0:
      dhcp4: true
      nameservers:
        addresses: [1.1.1.1, 8.8.8.8]
    enp2s0:
      dhcp4: true
      nameservers:
        addresses: [1.1.1.1, 8.8.8.8]
    enp4s0:
      dhcp4: false
      addresses: [172.25.0.3/24]
      routes:
      - to: default
        via: 192.168.0.1
      nameservers:
        addresses: [1.1.1.1, 8.8.8.8]
  version: 2" | sudo tee /etc/netplan/00-installer-config.yaml
  sudo netplan apply
}

function netplan1 {
    echo -e "
#
#network:
#    ethernets:
#        renderer: NetworkManager
#        enp4s0:
#            addresses: [192.168.250.10/24]
#            routes:
#            - to: default
#              via: 192.168.120.254
#            dhcp4: no
##           optional: true
#            nameservers:
#              addresses: [192.168.250.1]
#              #addresses: [200.225.197.34, 200.225.197.37] 
#              #addresses: [200.175.89.139, 200.175.5.139]
#              #addresses: [8.8.4.4, 8.8.8.8]
#              #addresses: [1.1.1.1, 1.0.0.1]
#    version: 2" | sudo tee -a /etc/netplan/00-installer-config.yaml

echo -e "
#
#network:
#  ethernets:
#    eth0:
#      dhcp4: true
#      optional: true

#    eth1: # THIS!
#      dhcp4: no
#      optional: true
#      addresses: [172.16.1.2/24]
#  version: 2" | sudo tee -a /etc/netplan/00-installer-config.yaml
  sudo netplan apply
}

function pfsense0 {
  sleep 1; clear; echo "Adicionando pfSense como VM"
  if ping -c 1 $serverip >/dev/null; then
    webadress="$lanhost"
  else
    webadress="$wanhost"
  fi
  # Aqui verifica se a .img ja existe ou se pode baixar uma nova.
  if ! [ -f "$destpath"/"$1" ]; then
    clear; sudo wget --user $usern4me --password $passw0rd $webadress/"$1" -O $destpath/"$1" &&
    sudo chmod 777 /var/run/libvirt/libvirt-sock
    sleep 2
    sudo touch /tmp/allowvirt0
  fi
}

function pfsense1 {
  if [ -f "/tmp/allowvirt0" ]; then
    sudo virt-install --import \
--name pfSense \
--boot hd,cdrom,menu=on \
--memory 2048 \
--vcpus 2 \
--cpu host \
--network type=direct,source=enp1s0,source_mode=bridge,mac=52:54:00:55:ea:01 \
--network type=direct,source=enp2s0,source_mode=bridge,mac=52:54:00:55:ea:02 \
--network type=direct,source=eno1,source_mode=bridge,mac=52:54:00:55:ea:03 \
--disk /var/lib/libvirt/images/"$1" \
--os-variant=freebsd14.2 \
--graphics vnc \
--import \
--autostart 1>/dev/null 2>/dev/null &
    sleep 1; clear
    sudo rm /tmp/allowvirt0
  fi
}

function the_end0 {
  clear; echo "Instalação concluida!"
  datetime0=$(date +"%d/%m/%Y - %H:%M")
  sudo yq -i ".Informacoes.Data_Instalacao = \"${datetime0}\"" "$yamlbase"
  sudo yq -i ".Informacoes.Data_Ultima_Reinstalacao = \"Nunca foi reinstalado\"" "$yamlbase"
  echo "Reiniciando sistema em 3 segundos"; sleep 3
  sudo reboot
}

# ======================================================================================================================================================== #

function common_place {
  welcome0
  bashconf0
  mkswap0
  timezone0
  useless0
  update0
  sysctl0
  motd0
  journal0
  fstab0
  firefox0
  yamls0
  crontabs0
}

# arm64 (rpi5)
function arm0 {
  common_place
}

# arm32 (redmi9)
function arm1 {
  welcome0
  bashconf0
  update0
  motd0
  journal0
  firefox0
  yamls0
  crontabs0
}

function linite0 {
  common_place
  netplan1
  pfsense0 "pfsense2.8"
}

function appliance0 {
  common_place
  netplan0
  pfsense0 "pfsense-modelo.img"
  pfsense1 "pfsense-modelo.img"
}

root_check0
hardsys0
the_end0

exit 0
